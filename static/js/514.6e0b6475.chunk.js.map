{"version":3,"file":"static/js/514.6e0b6475.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/Modal/Modal.styled.jsx","components/ModalForm/ModalForm.styled.jsx","components/ModalForm/ModalForm.jsx","components/Modal/Modal.jsx","components/ContactList/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/Contacts/index.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  padding-left:50px;\n`;\n\nexport const ButtonDelete = styled.button`\n    width: 80px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalArea = styled.div`\n  background-color: white;\n  padding: 30px;\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CloseIcon = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const FormEl = styled.form`\n  width: 350px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  gap: 30px;\n  border: 2px solid black;\n  margin-bottom: 25px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 10px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  height: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  background-color: inherit;\n`;\n","import { FiXCircle } from 'react-icons/fi';\nimport { Button, CloseIcon, FormEl, Input, Label } from './ModalForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { updateContact } from 'redux/operations';\n\nexport const ModalForm = ({ onClose, id, nameIt, numberIt }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const inputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = event => {\n    event.preventDefault();\n\n    dispatch(\n      updateContact(id, {\n        name: name,\n        number: number,\n      })\n    );\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <CloseIcon>\n        <FiXCircle onClick={onClose} />\n      </CloseIcon>\n      <FormEl onSubmit={dataSubmit}>\n        <Label>\n          {' '}\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={nameIt}\n            onChange={inputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          {' '}\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={numberIt}\n            onChange={inputChange}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Update contact</Button>\n      </FormEl>\n    </>\n  );\n};\n","import { useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ModalArea, Wrapper } from './Modal.styled';\nimport { ModalForm } from 'components/ModalForm';\n\nconst modalRootElement = document.querySelector('#modal');\n//console.log(modalRootElement);\n\nexport const Modal = props => {\n  const { id, open, onClose } = props;\n  const element = useMemo(() => document.createElement('div'), []);\n\n  useEffect(() => {\n    if (open) {\n      modalRootElement.appendChild(element);\n      window.addEventListener('keydown', keyDown);\n\n      return () => {\n        modalRootElement.removeChild(element);\n        window.removeEventListener('keydown', keyDown);\n      };\n    }\n  });\n\n  const keyDown = event => {\n    if (event.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleCheck = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  //return createPortal(props.children, element);\n  if (open) {\n    return createPortal(\n      <Wrapper onClick={handleCheck}>\n        <ModalArea>\n          <ModalForm onClose={onClose} id={id} />\n        </ModalArea>\n      </Wrapper>,\n      element\n    );\n  }\n\n  return null;\n};\n","import styled from \"@emotion/styled\";\n\nexport const Contact = styled.li`\n    font-size: 20px;\n    display:flex;\n    justify-content:flex-start;\n    gap: 30px;\n    align-items: center;\n    margin-bottom: 8px;\n`;\n\nexport const ButtonDelete = styled.button`\n    width: 80px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;\n","import { Modal } from 'components/Modal';\nimport { Contact, ButtonDelete } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { FiPhone } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { useState } from 'react';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const [open, setOpen] = useState(false);\n\n  const dispatch = useDispatch();\n  const deleteThisContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Contact key={id}>\n      <FiPhone />\n      <p>\n        {name}: {number}\n      </p>\n      <ButtonDelete onClick={() => deleteThisContact(id)}>Delete</ButtonDelete>\n      <ButtonDelete onClick={() => setOpen(true)}>Update</ButtonDelete>\n      <Modal\n        id={id}\n        nameIt={name}\n        numberIt={number}\n        open={open}\n        onClose={() => setOpen(false)}\n      />\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsList.contacts.items;\nexport const selectIsLoading = state => state.contactsList.contacts.isLoading;\nexport const selectError = state => state.contactsList.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { List } from './ContactList.styled';\nimport { ContactItem } from './ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { fetchContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {filteredContacts.length > 0 && (\n        <List>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactItem key={id} name={name} number={number} id={id} />\n          ))}\n        </List>\n      )}\n      {error && alert('Sorry, something is wrong!')}\n    </>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const FormEl = styled.form`\n    width: 350px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content:flex-start;\n    gap: 30px;\n    border: 2px solid black;\n    margin-bottom: 25px;\n`;\n\nexport const Label = styled.label`\n    display: block;\n    font-size: 20px;\n`;\n\nexport const Input = styled.input`\n    display: block;  \n    margin-top: 10px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    height:20px;\n`;\n\nexport const Button = styled.button`\n    width: 100px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { FormEl, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const inputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    //console.log(contacts);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl onSubmit={dataSubmit}>\n      <Label>\n        {' '}\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={inputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        {' '}\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={inputChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </FormEl>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n\n///////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { FormEl, Label, Input, Button } from './ContactForm.styled';\n// import { Formik, ErrorMessage } from \"formik\";\n// import * as yup from 'yup';\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// }\n\n// const schema = yup.object().shape({\n//   name: yup.string().trim().required(),\n//   number: yup.string().trim().required(),\n// });\n\n// export const ContactForm = () => {\n\n//   const handleSubmit = (values, {resetForm}) => {\n//     console.log(values);\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}\n//     >\n//       <FormEl >\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             //value={name}\n//             //onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//           <ErrorMessage name=\"name\" component=\"div\"/>\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             //value={number}\n//             //onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//           <ErrorMessage name=\"number\" component=\"div\"/>\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </FormEl>\n//     </Formik>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { useState } from 'react';\n// import { Form, Label, Input, Button } from './ContactForm.styled';\n\n// export const ContactForm =() => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const inputChange = event => {\n//     const { name, value } = event.target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const dataSubmit = event => {\n//     event.preventDefault();\n//     const formSubmit = ({ name, number }) => ({\n//       name: name,\n//       number: number,\n//     });\n\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//       <Form onSubmit={dataSubmit}>\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </Form>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n","import styled from \"@emotion/styled\";\n\nexport const FilterZone = styled.label`\n  display: block; \n  margin-bottom:10px; \n`;\n\nexport const Input = styled.input`\n    display: block; \n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterZone, Input } from './Filter.styled';\nimport { toFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(toFilter(event.currentTarget.value));\n  };\n\n  return (\n    <FilterZone>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={changeFilter} />\n    </FilterZone>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const TitleEl = styled.h1`\n  font-weight: 600;\n  margin-bottom: 25px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleEl } from './Title.styled';\n\nexport const Title = ({ title, children }) => (\n  <>\n    <TitleEl>{title}</TitleEl>\n    {children}\n  </>\n);\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import Contacts from './Contacts.jsx';\nexport default Contacts;\n","import { ContactList } from 'components/ContactList';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { Title } from 'components/Title';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <Title title=\"Phonebook\" />\n      <ContactForm />\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["List","styled","Wrapper","ModalArea","CloseIcon","FormEl","Label","Input","Button","ModalForm","onClose","id","nameIt","numberIt","useState","name","setName","number","setNumber","dispatch","useDispatch","inputChange","event","target","value","reset","onClick","onSubmit","preventDefault","updateContact","type","onChange","pattern","title","required","modalRootElement","document","querySelector","Modal","props","open","element","useMemo","createElement","useEffect","appendChild","window","addEventListener","keyDown","removeChild","removeEventListener","code","createPortal","e","currentTarget","Contact","ButtonDelete","ContactItem","setOpen","deleteContact","deleteThisContact","selectContacts","state","contactsList","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes","ContactList","useSelector","filteredContacts","fetchContacts","Loader","length","map","alert","ContactForm","newContact","nanoid","find","addContact","FilterZone","Filter","toFilter","TitleEl","Title","children"],"sourceRoot":""}