{"version":3,"file":"static/js/141.50f7e0b6.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactList/ContactItem/ContactItem.styled.jsx","components/Modal/ModalForm/ModalForm.styled.jsx","components/Modal/ModalForm/ModalForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/Contacts/index.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const List = styled.table`\n  padding: ${theme.spacing(5)};\n  padding-top: ${theme.spacing(2)};\n`;\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\nimport modalBg from '../../images/modalBg.png';\n\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background: ${theme.colors.modalWrapper};\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalArea = styled.div`\n  padding: ${theme.spacing(7)};\n  border: 1px solid ${theme.colors.greyDark};\n  border-radius: ${theme.spacing(1)};\n  box-shadow: ${theme.shadows.small};\n  background-color: azure;\n  background-image: url(${modalBg});\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n`;\n","import { useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ModalArea, Wrapper } from './Modal.styled';\n\n//import css from './Modal.module.css';\n\nconst modalRootElement = document.querySelector('#modal');\n//console.log(modalRootElement);\n\nexport const Modal = props => {\n  const { children, open, onClose } = props;\n  const element = useMemo(() => document.createElement('div'), []);\n\n  useEffect(() => {\n    if (open) {\n      modalRootElement.appendChild(element);\n      window.addEventListener('keydown', keyDown);\n\n      return () => {\n        modalRootElement.removeChild(element);\n        window.removeEventListener('keydown', keyDown);\n      };\n    }\n  });\n\n  const keyDown = event => {\n    if (event.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleCheck = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  //return createPortal(props.children, element);\n  if (open) {\n    return createPortal(\n      <Wrapper onClick={handleCheck}>\n        <ModalArea>{children}</ModalArea>\n      </Wrapper>,\n      element\n    );\n  }\n\n  return null;\n};\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const ContactTr = styled.tr`\n  font-size: ${theme.fontSizes.large};\n  align-items: baseline;\n`;\n\nexport const ContactTd1 = styled.td`\n  height: ${theme.spacing(10)};\n  width: ${theme.spacing(10)};\n`;\n\nexport const ContactTd2 = styled.td`\n  height: ${theme.spacing(10)};\n  width: ${theme.spacing(55)};\n`;\n\nexport const ContactTd3 = styled.td`\n  height: ${theme.spacing(10)};\n  width: ${theme.spacing(63)};\n  display: flex;\n  gap: ${theme.spacing(7)};\n`;\n\nexport const ButtonEl = styled.button`\n  width: ${theme.spacing(25)};\n  height: ${theme.spacing(7)};\n  font-size: ${theme.fontSizes.small};\n  border: 1px solid ${theme.colors.greenDark};\n  border-radius: ${theme.spacing(1)};\n  background-color: inherit;\n  box-shadow: ${theme.shadows.small};\n  transition: box-shadow 150ms linear;\n\n  &:hover,\n  :focus {\n    box-shadow: ${theme.shadows.inHover};\n  }\n`;\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const CloseIcon = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const TitleEl = styled.h2`\n  font-weight: ${theme.fontWeight.medium};\n`;\n\nexport const FormEl = styled.form`\n  width: ${theme.spacing(88)};\n  padding: ${theme.spacing(5)};\n  padding-left: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  gap: ${theme.spacing(7)};\n  margin-bottom: ${theme.spacing(6)};\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: ${theme.fontSizes.medium};\n`;\n\nexport const Input = styled.input`\n  margin-top: ${theme.spacing(2)};\n  height: ${theme.spacing(7)};\n  width: ${theme.spacing(60)};\n`;\n\nexport const Button = styled.button`\n  width: ${theme.spacing(44)};\n  height: ${theme.spacing(9)};\n`;\n","import { FiXCircle } from 'react-icons/fi';\nimport {\n  Button,\n  CloseIcon,\n  FormEl,\n  Input,\n  Label,\n  TitleEl,\n} from './ModalForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { updateContact } from 'redux/operations';\n\nexport const ModalForm = ({ onClose, id, nameIt, numberIt }) => {\n  const [name, setName] = useState(nameIt);\n  const [number, setNumber] = useState(numberIt);\n  const dispatch = useDispatch();\n\n  const inputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = event => {\n    event.preventDefault();\n\n    dispatch(updateContact({ id, name, number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <CloseIcon>\n        <FiXCircle size={30} color=\"#424442\" onClick={onClose} />\n      </CloseIcon>\n      <TitleEl>Change contact details</TitleEl>\n      <FormEl onSubmit={dataSubmit}>\n        <Label>\n          {' '}\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={inputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          {' '}\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={inputChange}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Update contact</Button>\n      </FormEl>\n    </>\n  );\n};\n","import { Modal } from 'components/Modal';\nimport {\n  ContactTr,\n  ContactTd1,\n  ContactTd2,\n  ContactTd3,\n  ButtonEl,\n} from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { AiOutlineLine } from 'react-icons/ai';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { useState } from 'react';\nimport { ModalForm } from 'components/Modal/ModalForm';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const [open, setOpen] = useState(false);\n\n  const dispatch = useDispatch();\n  const deleteThisContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactTr key={id}>\n      <ContactTd1>\n        <AiOutlineLine />\n      </ContactTd1>\n      <ContactTd2>\n        <p>{name}:</p>\n      </ContactTd2>\n      <ContactTd2>\n        <p>{number}</p>\n      </ContactTd2>\n      <ContactTd3>\n        <ButtonEl onClick={() => deleteThisContact(id)}>Delete</ButtonEl>\n        <ButtonEl onClick={() => setOpen(true)}>Update</ButtonEl>\n        <Modal open={open} onClose={() => setOpen(false)}>\n          <ModalForm\n            id={id}\n            nameIt={name}\n            numberIt={number}\n            onClose={() => setOpen(false)}\n          />\n        </Modal>\n      </ContactTd3>\n    </ContactTr>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsList.contacts.items;\nexport const selectIsLoading = state => state.contactsList.contacts.isLoading;\nexport const selectError = state => state.contactsList.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { List } from './ContactList.styled';\nimport { ContactItem } from './ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { fetchContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {filteredContacts.length > 0 && (\n        <List>\n          <tbody>\n            {filteredContacts.map(({ id, name, number }) => (\n              <ContactItem key={id} name={name} number={number} id={id} />\n            ))}\n          </tbody>\n        </List>\n      )}\n      {error && alert('Sorry, something is wrong!')}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const FormEl = styled.form`\n  width: ${theme.spacing(88)};\n  padding: ${theme.spacing(5)};\n  padding-top: 0;\n  display: flex;\n  gap: ${theme.spacing(7)};\n  align-items: last baseline;\n  margin-bottom: ${theme.spacing(6)};\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: ${theme.fontSizes.medium};\n`;\n\nexport const Input = styled.input`\n  margin-top: ${theme.spacing(2)};\n  height: ${theme.spacing(7)};\n  width: ${theme.spacing(55)};\n`;\n\nexport const Button = styled.button`\n  min-width: ${theme.spacing(38)};\n  height: ${theme.spacing(9)};\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { FormEl, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const inputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    //console.log(contacts);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl onSubmit={dataSubmit}>\n      <Label>\n        {' '}\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={inputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        {' '}\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={inputChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </FormEl>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n\n///////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { FormEl, Label, Input, Button } from './ContactForm.styled';\n// import { Formik, ErrorMessage } from \"formik\";\n// import * as yup from 'yup';\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// }\n\n// const schema = yup.object().shape({\n//   name: yup.string().trim().required(),\n//   number: yup.string().trim().required(),\n// });\n\n// export const ContactForm = () => {\n\n//   const handleSubmit = (values, {resetForm}) => {\n//     console.log(values);\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}\n//     >\n//       <FormEl >\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             //value={name}\n//             //onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//           <ErrorMessage name=\"name\" component=\"div\"/>\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             //value={number}\n//             //onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//           <ErrorMessage name=\"number\" component=\"div\"/>\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </FormEl>\n//     </Formik>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { useState } from 'react';\n// import { Form, Label, Input, Button } from './ContactForm.styled';\n\n// export const ContactForm =() => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const inputChange = event => {\n//     const { name, value } = event.target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const dataSubmit = event => {\n//     event.preventDefault();\n//     const formSubmit = ({ name, number }) => ({\n//       name: name,\n//       number: number,\n//     });\n\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//       <Form onSubmit={dataSubmit}>\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </Form>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const FilterZone = styled.label`\n  display: block;\n  margin-bottom: ${theme.spacing(8)};\n  margin-left: ${theme.spacing(6)};\n`;\n\nexport const Input = styled.input`\n  height: ${theme.spacing(7)};\n  width: ${theme.spacing(55)};\n  margin-top: ${theme.spacing(2)};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterZone, Input } from './Filter.styled';\nimport { toFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(toFilter(event.currentTarget.value));\n  };\n\n  return (\n    <FilterZone>\n      Find contact by name\n      <Input type=\"text\" value={filter} onChange={changeFilter} />\n    </FilterZone>\n  );\n};\n","import styled from '@emotion/styled';\nimport { theme } from 'styles';\n\nexport const TitleEl = styled.h1`\n  font-weight: ${theme.fontWeight.bold};\n  margin-bottom: ${theme.spacing(5)};\n  font-size: ${theme.fontSizes.xxxl};\n`;\n","import PropTypes from 'prop-types';\nimport { TitleEl } from './Title.styled';\n\nexport const Title = ({ title, children }) => (\n  <>\n    <TitleEl>{title}</TitleEl>\n    {children}\n  </>\n);\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import Contacts from './Contacts.jsx';\nexport default Contacts;\n","import { ContactList } from 'components/ContactList';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { Title } from 'components/Title';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <Title title=\"Add new contact\" />\n      <ContactForm />\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["List","styled","theme","Wrapper","ModalArea","modalBg","modalRootElement","document","querySelector","Modal","props","children","open","onClose","element","useMemo","createElement","useEffect","appendChild","window","addEventListener","keyDown","removeChild","removeEventListener","event","code","createPortal","onClick","e","target","currentTarget","ContactTr","ContactTd1","ContactTd2","ContactTd3","ButtonEl","CloseIcon","TitleEl","FormEl","Label","Input","Button","ModalForm","id","nameIt","numberIt","useState","name","setName","number","setNumber","dispatch","useDispatch","inputChange","value","reset","size","color","onSubmit","preventDefault","updateContact","type","onChange","pattern","title","required","ContactItem","setOpen","deleteContact","deleteThisContact","selectContacts","state","contactsList","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes","ContactList","useSelector","filteredContacts","fetchContacts","Loader","length","map","alert","ContactForm","newContact","nanoid","find","addContact","FilterZone","Filter","toFilter","Title"],"sourceRoot":""}