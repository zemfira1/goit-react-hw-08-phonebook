{"version":3,"file":"static/js/60.425c9d32.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactList/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/Contacts/index.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  padding-left:50px;\n`;\n\nexport const ButtonDelete = styled.button`\n    width: 80px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;","import styled from \"@emotion/styled\";\n\nexport const Contact = styled.li`\n    font-size: 20px;\n    display:flex;\n    justify-content:flex-start;\n    gap: 30px;\n    align-items: center;\n    margin-bottom: 8px;\n`;\n\nexport const ButtonDelete = styled.button`\n    width: 80px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;\n","import { Contact, ButtonDelete } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { FiPhone } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const deleteThisContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Contact key={id}>\n      <FiPhone />\n      <p>\n        {name}: {number}\n      </p>\n      <ButtonDelete onClick={() => deleteThisContact(id)}>Delete</ButtonDelete>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsList.contacts.items;\nexport const selectIsLoading = state => state.contactsList.contacts.isLoading;\nexport const selectError = state => state.contactsList.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { List } from './ContactList.styled';\nimport { ContactItem } from './ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { fetchContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {filteredContacts.length > 0 && (\n        <List>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactItem key={id} name={name} number={number} id={id} />\n          ))}\n        </List>\n      )}\n      {error && alert('Sorry, something is wrong!')}\n    </>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const FormEl = styled.form`\n    width: 350px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content:flex-start;\n    gap: 30px;\n    border: 2px solid black;\n    margin-bottom: 25px;\n`;\n\nexport const Label = styled.label`\n    display: block;\n    font-size: 20px;\n`;\n\nexport const Input = styled.input`\n    display: block;  \n    margin-top: 10px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    height:20px;\n`;\n\nexport const Button = styled.button`\n    width: 100px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    background-color: inherit;\n`;","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { FormEl, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const inputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    //console.log(contacts);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl onSubmit={dataSubmit}>\n      <Label>\n        {' '}\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={inputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        {' '}\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={inputChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </FormEl>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n\n///////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { FormEl, Label, Input, Button } from './ContactForm.styled';\n// import { Formik, ErrorMessage } from \"formik\";\n// import * as yup from 'yup';\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// }\n\n// const schema = yup.object().shape({\n//   name: yup.string().trim().required(),\n//   number: yup.string().trim().required(),\n// });\n\n// export const ContactForm = () => {\n\n//   const handleSubmit = (values, {resetForm}) => {\n//     console.log(values);\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}\n//     >\n//       <FormEl >\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             //value={name}\n//             //onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//           <ErrorMessage name=\"name\" component=\"div\"/>\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             //value={number}\n//             //onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//           <ErrorMessage name=\"number\" component=\"div\"/>\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </FormEl>\n//     </Formik>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n////////////////////////////////////////////////////////////////////////////\n\n// import PropTypes from \"prop-types\";\n// import { useState } from 'react';\n// import { Form, Label, Input, Button } from './ContactForm.styled';\n\n// export const ContactForm =() => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const inputChange = event => {\n//     const { name, value } = event.target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const dataSubmit = event => {\n//     event.preventDefault();\n//     const formSubmit = ({ name, number }) => ({\n//       name: name,\n//       number: number,\n//     });\n\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//       <Form onSubmit={dataSubmit}>\n//         <Label> Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={inputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </Label>\n//         <Label> Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={inputChange}\n//             pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </Label>\n//         <Button type='submit'>Add contact</Button>\n//       </Form>\n//     )\n// }\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func,\n//     type: PropTypes.string,\n//     name: PropTypes.string,\n//     value: PropTypes.string,\n//     onChange: PropTypes.func,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string,\n//     required: PropTypes.bool,\n// }\n","import styled from \"@emotion/styled\";\n\nexport const FilterZone = styled.label`\n  display: block; \n  margin-bottom:10px; \n`;\n\nexport const Input = styled.input`\n    display: block; \n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterZone, Input } from './Filter.styled';\nimport { toFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(toFilter(event.currentTarget.value));\n  };\n\n  return (\n    <FilterZone>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={changeFilter} />\n    </FilterZone>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const TitleEl = styled.h1`\n  font-weight: 600;\n  margin-bottom: 25px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleEl } from './Title.styled';\n\nexport const Title = ({ title, children }) => (\n  <>\n    <TitleEl>{title}</TitleEl>\n    {children}\n  </>\n);\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import Contacts from './Contacts.jsx';\nexport default Contacts;\n","import { ContactList } from 'components/ContactList';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { Title } from 'components/Title';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <Title title=\"Phonebook\" />\n      <ContactForm />\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["List","styled","Contact","ButtonDelete","ContactItem","id","name","number","dispatch","useDispatch","onClick","deleteContact","deleteThisContact","selectContacts","state","contactsList","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes","ContactList","useSelector","filteredContacts","useEffect","fetchContacts","Loader","length","map","alert","FormEl","Label","Input","Button","ContactForm","useState","setName","setNumber","inputChange","event","target","value","reset","onSubmit","preventDefault","newContact","nanoid","find","addContact","type","onChange","pattern","title","required","FilterZone","Filter","toFilter","currentTarget","TitleEl","Title","children"],"sourceRoot":""}